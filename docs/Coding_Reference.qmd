---
title: "Coding_Reference"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# **From EDS 212 Day 2, 8/6/24**

Derivatives in R using 'D()' ---- trying to find the derivative of 5x\^2, but you can't write just that into R ----

create an expression ----

```{r}
my_expression <- expression(5*x^2)
```

find the derivative of our expression now, with respect to x ---- create a new variable for this ----

```{r}
my_derivative <- D(expr=my_expression, name="x")
```

now we can look at our derivative: ----

```{r}
my_derivative
```

to learn more, you can always look at the documentation for a function by typing into the console ?D ---- you can do this with any function ----

now, let's evaulate our derivative at a value of x=2.8 ----

```{r}
x <- 2.8
eval(my_derivative)
```

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

# **From EDS 221 Day 1, 8/12/24**

List of terminal (bash) commands and what they do

|               |                                                                                                                                                      |
|-------------|-----------------------------------------------------------|
| `pwd`         | print your current working directory                                                                                                                 |
| `cd`          | change directory                                                                                                                                     |
| `ls`          | list contents of a directory                                                                                                                         |
| `tree`        | display the contents of a directory in the form of a tree structure (not installed by default)                                                       |
| `echo`        | print text that is passed in as an argument                                                                                                          |
| `mv`          | move or rename a file                                                                                                                                |
| `cp`          | copy a file(s) or directory(ies)                                                                                                                     |
| `touch`       | create a new empty file                                                                                                                              |
| `mkdir`       | create a new directory                                                                                                                               |
| `rm`/`rmdir`  | remove a file/ empty directory (be careful – there is no “trash” folder!)                                                                            |
| `grep`        | searches a given file(s) for lines containing a match to a given pattern list                                                                        |
| `awk`         | a text processing language that can be used in shell scripts or at a shell prompt for actions like pattern matching, printing specified fields, etc. |
| `sed`         | stands for **S**tream **Ed**itor; a versatile command for editing files                                                                              |
| `cut`         | extract a specific portion of text in a file                                                                                                         |
| `join`        | join two files based on a key field present in both                                                                                                  |
| `top`, `htop` | view running processes in a Linux system (press `Q` to quit)                                                                                         |

For file paths always use here::here to direct people to the file within the r project

# **From EDS 221 Day 2, 8/13/24**

Making data frames: name the data frame, set type (data.frame), name your columns and the data to be placed in that column.

Examples:

```{r}
fruit <- data.frame(type = c("apple", "banana", "peach"), 
                    mass = c(130, 195, 150))
```

Write code to create a data frame called `df_1`

```{r}
df_1 <- data.frame(region = c("A", "B", "A", "D"),
                   species = c("otter", 
                               "great white", 
                               "sea lion", 
                               "gray whale"),
                   count = c(12, 2, 36, 6))

```

Creating subsets of a data frame with index and subset and plotting

Examples:

```{r}
mtcars[mtcars$gear == 5,]
mtcars[mtcars$gear == 5 & mtcars$cyl ==4,]

subset(mtcars, gear == 5 & cyl == 4)

library(tidyverse)
ggplot(data = subset(mtcars, gear == 5 & cyl == 4),
       aes(x = gear, y = cyl)) + geom_col()
```

To remove columns from a data frame, you can…

-   set individual columns to NULL

```{r}
cars <- mtcars
cars$qsec <- NULL
cars

```

-   subset to return only the columns you want, based on their names

```{r}
car_hp_disp <- cars[c("disp", "hp")]
```

-   or, if you know the columns you don’t want, use set operations to work which columns to keep

```{r}
no_carb <- cars[setdiff(names(cars), "carb")]
```

# **From EDS 221 Day 3, 8/14/24**

# **From EDS 221 Day 6, 8/20/24**

Mutate/Filter/Group by %\>% summarize/Case when

```{r}

# import documents and read csv, clean names 
lobsters <- read_csv(here("data","Lobster_Abundance_All_Years_20210412.csv"), na = c("-99999", "")) %>% 
  clean_names() %>% 
  uncount(count)

# Create a summary table that finds the total counts (see: n()), and mean carapace lengths of lobsters observed in the data set by site and year

lobster_total <- lobsters %>% 
  group_by(site, year) %>% 
  summarise(individuals = n(), carapace_mean = mean(size_mm, na.rm = TRUE))

# Create a ggplot graph of the number of total lobsters observed (y-axis) by year (x-axis) in the study, grouped (either aesthetically or by faceting) by site

ggplot(lobster_total, aes(x = year, y = individuals)) + geom_line(aes(group = site, color = site))

# or this way
ggplot(lobster_total, aes(x = site, y = individuals)) + geom_point(aes(color = site)) + facet_wrap(vars(year))

#The legal lobster size (carapace length) in California is 79.76 mm.

lobster_2020 <- subset(lobsters, year == 2020)

legal_lobster_2020 <- lobster_2020 %>% mutate(legal = dplyr::case_when(size_mm <= 79.76 ~ 'YES',
                                                                       size_mm >= 79.76 ~ 'NO')) %>%
  group_by(site, legal) %>%
  summarise(total_lobsters = n())

ggplot(legal_lobster_2020, aes(x = site, y = total_lobsters)) + geom_col(aes(fill = legal), position = "fill")


Filter function 
# Create and store a subset that only contains lobsters from sites “IVEE”, “CARP” and “NAPL”. Check your output data frame to ensure that only those three sites exist.
ex_a <- lobsters %>%
  filter(site == c("AQUE", "CARP", "NAPL"))

# Create a subset that only contains lobsters observed in August.
ex_b <- ex_a %>%
  filter(month == 8)

# Create a subset with lobsters at Arroyo Quemado (AQUE) OR with a carapace length greater than 70 mm.
ex_c <- ex_b %>%
  filter(site == "AQUE" | size_mm > 70)

# Create a subset that does NOT include observations from Naples Reef (NAPL)
ex_d <- ex_c %>% 
  filter(site != "NAPL")

Group by 
# Find the mean and standard deviation of lobster carapace length, grouped by site.
ex_e <- lobsters %>%
  group_by(site) %>% 
  summarize(carapace_mean = mean(size_mm, na.rm = TRUE), carapace_sd = sd(size_mm, na.rm = TRUE))

# Find the maximum carapace length by site and month.
ex_f <- lobsters %>%
  group_by(site, month) %>% 
  summarize(carapace_max_lenght = max(size_mm, na.rm = TRUE))

Mutate
# Add a new column that contains lobster carapace length converted to centimeters. Check output.
ex_g <- lobsters %>% 
  mutate(carapace_length_cm = size_mm * 10)

# Update the site column to all lowercase. Check output.
ex_h <- lobsters %>% 
  mutate(site = tolower(site))

# Convert the area column to a character (not sure why you’d want to do this, but try it anyway). Check output.
ex_i <- lobsters %>% 
  mutate(area = as.character(area))

# check class
class(ex_i$area)

Case When
# Use case_when() to add a new column called size_bin that contains “small” if carapace size is <= 70 mm, or “large” if it is greater than 70 mm. Check output.
ex_j <- lobsters %>% mutate(size_bin = case_when(size_mm <= 70 ~ "small",
                                                 size_mm > 70 ~ "large"))

# Use case_when() to add a new column called designation that contains “MPA” if the site is “IVEE” or “NAPL”, and “not MPA” for all other outcomes.
ex_k <- lobsters %>% mutate(designation = case_when(site %in% c("NAPL", "IVEE") ~ "MPA",
                                                    TRUE ~ "not MPA"))
                                                  
                                                                

```
